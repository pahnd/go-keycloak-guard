version: '3.9'

x-kong-db-config: &kong-db-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: db
  KONG_PG_USER: kong
  KONG_PG_PASSWORD: kong

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-network:
    external: false

services:
  builder:
    image: golang:1.22.4-bullseye
    container_name: builder
    working_dir: /app
    volumes:
      - ./:/app
    command: >
      sh -c "cd /app; make compile"
    networks:
      - kong-network
    profiles:
      - compile


  kong-migrations:
    image: kong:3.4.2
    container_name: kong_migrations_bootstrap
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      <<: *kong-db-env
    networks:
      - kong-network
    restart: on-failure
    profiles:
      - kong

  migrations-up:
    image: kong:3.4.2
    container_name: migrations_up
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      <<: *kong-db-env
    networks:
      - kong-network
    restart: on-failure
    profiles:
      - kong

  migrations-end:
    image: kong:3.4.2
    container_name: migrations_end
    command: kong migrations finish
    depends_on:
      - db
    environment:
      <<: *kong-db-env
    networks:
      - kong-network
    restart: on-failure
    profiles:
      - kong

  kong:
    image: kong:3.4.2
    container_name: kong
    user: kong
    environment:
      <<: *kong-db-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr

      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001

      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: debug

      KONG_PREFIX: /var/run/kong
      KONG_PLUGINSERVER_NAMES: keycloak-guard
      KONG_PLUGINSERVER_KEYCLOAK_GUARD_START_CMD: /usr/bin/keycloak-guard -kong-prefix /tmp
      KONG_PLUGINSERVER_KEYCLOAK_GUARD_QUERY_CMD: /usr/bin/keycloak-guard -dump
      KONG_PLUGINSERVER_KEYCLOAK_GUARD_SOCKET: /tmp/keycloak-guard.socket
      KONG_PLUGINSERVER_KEYCLOAK_GUARD_START_TIMEOUT: 10
      KONG_PLUGINS: bundled,keycloak-guard
    networks:
      - kong-network
    ports:
      - 8000:8000/tcp
      - 8001:8001/tcp

    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:10
    read_only: true
    volumes:
      - kong_prefix_vol:/var/run/kong
      - kong_tmp_vol:/tmp
      - ./bin/keycloak-guard:/usr/bin/keycloak-guard
      - ./schema.lua:/usr/local/share/lua/5.1/kong/plugins/keycloak-guard/schema.lua
    security_opt:
      - no-new-privileges
    profiles:
      - kong

  konga:
    image: pantsel/konga:0.14.9
    container_name: konga
    environment:
      - NO_AUTH=true
      - KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE=/konga.db
    depends_on:
      - kong
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - kong-network
    ports:
      - 1337:1337
    volumes:
      - ./konga.db:/konga.db
    profiles:
      - kong

  db:
    image: postgres:11
    container_name: postgres
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_MULTIPLE_DATABASES: keycloak
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-network
    volumes:
      - kong_data:/var/lib/postgresql/data
      - ./init-keycloak-db.sh:/docker-entrypoint-initdb.d/init-keycloak-db.sh
    profiles:
      - kong

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_FEATURES: preview
    command: start-dev
    depends_on:
      - db
    networks:
      - kong-network
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure
    profiles:
      - kong